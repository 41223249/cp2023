var tipuesearch = {"pages": [{'title': 'About', 'text': '\n  https://github.com/mdecycu/cmsite \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'W5', 'text': '// 包含標準輸出入程式庫的標頭文件\n// https://blog.csdn.net/weixin_38468077/article/details/101069365\n// http://www.gnuplot.info/demo/\n// https://github.com/sysprog21/rv32emu\n// https://github.com/sysprog21/semu \n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3\n// https://cs61c.org/fa23/\n// https://greenteapress.com/wp/think-python-2e/\n// https://github.com/ecalvadi/c99-examples\n// https://github.com/gouravthakur39/beginners-C-program-examples\n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples\n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf\n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf\n// https://jsommers.github.io/cbook/cbook.pdf\n// https://jsommers.github.io/cbook/index.html\n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf\n// http://cslibrary.stanford.edu/101/EssentialC.pdf\n// https://publications.gbdirect.co.uk/c_book/\n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf\n// ***** execute on replit \n// cd downloads\n// cc gnuplot_ex1.c -o gnuplot_ex1\n// ./gnuplot_ex1\n#include <stdio.h>\n\n// 主函式\nint main() {\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");\n    fprintf(gnuplotPipe, "plot sin(x)");\n    // Close popen\n    pclose(gnuplotPipe);\n\n    return 0;\n} \n clear \n cd downloads \n cc gunpllot_e1.c \n ./a.out \n \n \n \n', 'tags': '', 'url': 'W5.html'}, {'title': 'W6-W7', 'text': '', 'tags': '', 'url': 'W6-W7.html'}, {'title': 'Korean', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\n#define WIDTH 900\n#define HEIGHT 600\n#define FILENAME "south_korea_flag.png"\n\nint main() {\n    gdImagePtr im;\n    FILE *pngout;\n    int white, black, red, blue;\n\n    im = gdImageCreate(WIDTH, HEIGHT);\n\n    white = gdImageColorAllocate(im, 255, 255, 255);\n    black = gdImageColorAllocate(im, 0, 0, 0);\n    red = gdImageColorAllocate(im, 205, 0, 0);\n    blue = gdImageColorAllocate(im, 0, 56, 168);\n\n    // Background (white)\n    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);\n\n    // Blue Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);\n\n    // Red Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);\n\n  int circleX = 385;    // 圓心的 X 座標\n  int circleY = 262.5;   // 圓心的 Y 座標\n  int circleRadius = 75;     \n\n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);\n\n  int circleX2 = 515;    // 圓心的 X 座標\n\n int circleY2 = 337.5;\n\n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);\n\n  {\n\n\n  // 起點和終點位置\n\n  int startX = 340;    \n  // 線的起點 X 座標\n\n  int startY = 90;   \n  // 線的起點 Y 座標\n\n  int endX = 200;     \n  // 線的終點 X 座標\n\n  int endY = 260;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 270;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 210;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);\n\n  gdImageSetThickness(im, lineWidth +12);\ngdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);\n}\n  {\n    // 起點和終點位置\n\n  int startX = 330;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 190;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\n  }\n\n  {\n    // 起點和終點位置\n\n  int startX = 564;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 704;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);\n\ngdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 400, 734, 490, white);\n\n  int startX2 = 553;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 633;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);\n  }\n  {\n    // 起點和終點位置\n\n  int startX = 330;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 190;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\n  }\n  {\n    // 起點和終點位置\n\n  int startX = 564;    \n  // 線的起點 X 座標\n\n  int startY = 97;   \n  // 線的起點 Y 座標\n\n  int endX = 704;     \n  // 線的終點 X 座標\n\n  int endY = 267;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 212, 734, 118, white);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);\n\n  int startX2 = 553;    \n  // 線的起點 X 座標\n\n  int startY2 = 277;   \n  // 線的起點 Y 座標\n\n  int endX2 = 633;     \n  // 線的終點 X 座標\n\n  int endY2 = 217;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);\n\n    gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);\n\n  }\n\n    // Save image\nFILE *outputFile = fopen("./../images/korea_flag.png", "wb");\nif (outputFile == NULL) {\n    fprintf(stderr, "Error opening the output file.\\n");\n    return 1;\n}\n  gdImagePngEx(im, outputFile, 9);\n      fclose(outputFile);\n      gdImageDestroy(im);\n      return 0;\n  } \n \n clear \n cd downloads \n cc gd_korean_flag.c \n ./a.out \n \n', 'tags': '', 'url': 'Korean.html'}, {'title': 'PROC', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nvoid draw_chinese_flag(gdImagePtr img);\n \nint main() {\n    int width = 300; // 國旗寬度\n    int height = 200; // 國旗高度\n \n    gdImagePtr im = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(im, 0);\n \n    draw_chinese_flag(im);\n \n    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时出错。\\n");\n        return 1;\n    }\n \n    gdImagePngEx(im, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(im);\n \n    return 0;\n}\n \n// 声明 draw_star 函数\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n \nvoid draw_chinese_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, yellow;\n \n    // 國旗顏色\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景\n    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星\n \n    // 畫紅色背景\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n \n    // 設置星星的大小和位置\n    int star_size = (int)(0.28 * height);\n    int star_x = (int)(0.165 * width);\n    int star_y = (int)(0.265 * height);\n \n    // 畫大星星\n    draw_star(img, star_x, star_y, star_size, yellow, 11.0);\n \n    // 繪製小星星，位置根據實際國旗比例計算\n    double radius = 0.15 * height;\n    double angle = 360 / 7 * M_PI / 179.0;\n    double rotation = -M_PI / 7.5;\n    int cx = (int)(0.32 * width);\n    int cy = (int)(0.27 * height);\n \n    for (int i = -1; i < 3; i++) {\n        int x = (int)(cx + radius * cos(i * angle + rotation));\n        int y = (int)(cy + radius * sin(i * angle + rotation));\n        draw_star(img, x, y, 19, yellow, M_PI / 5.0);\n    }\n}\n \nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n \n    // 计算星形的五个外点和五个内点\n    double outer_radius = size / 2;\n    double inner_radius = size / 6;\n    double angle = M_PI / 5.0;\n \n    for (int i = 0; i < 10; i++) {\n        double radius = (i % 2 == 0) ? outer_radius : inner_radius;\n        double theta = rotation_angle + i * angle;\n        points[i].x = x + radius * cos(theta);\n        points[i].y = y + radius * sin(theta);\n    }\n \n    // 使用 gdImageFilledPolygon 绘制星形\n    gdImageFilledPolygon(img, points, 10, color);\n} \n \n clear \n cd downloads \n cc gd_proc_flag.c \n ./a.out \n', 'tags': '', 'url': 'PROC.html'}, {'title': 'UK', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_uk_flag(gdImagePtr img);\nvoid fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);\n\nint main() {\n    // 设置国旗的宽和高\n    int width = 1200;\n    int height = width / 2;\n\n    // 创建图像\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    // 绘制英国国旗\n    draw_uk_flag(img);\n\n    // 将图像保存到文件\n    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时发生错误。\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\n\n\nvoid draw_uk_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n\n    int red, white, blue;\n    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色\n\n    gdImageFilledRectangle(img, 0, 0, width, height, blue);\n\n\n  int x1, y1, x2, y2, x3, y3;\n  {\n    int line_thickness = 100;\n    gdImageSetThickness(img, line_thickness);\n\n    int x1, y1, x2, y2, x3, y3;\n\n    // 绘制白色斜线\n    x1 = 0;\n    y1 = 600;\n    x2 = 1200;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n    x1 = 0;\n    y1 = 0;\n    x2 = 1200;\n    y2 = 600;\n    gdImageLine(img, x1, y1, x2, y2, white);\n}\n  {\n    int line_thickness = 33;\n    gdImageSetThickness(img, line_thickness);\n\n\n    // 绘制红色斜线\n    x1 = 566;\n    y1 = 300;\n    x2 = 1166;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 1233;\n    y1 = 600;\n    x2 = 633;\n    y2 = 300;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 566;\n    y1 = 300;\n    x2 = -33;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 600;\n    y1 = 316.5;\n    x2 = 0;\n    y2 = 616.5;\n    gdImageLine(img, x1, y1, x2, y2, red);\n  }\n  {\n  int line_thickness = 33;\n  gdImageSetThickness(img, line_thickness);\n\n  int x1, y1, x2, y2, x3, y3;\n\n  // 绘制  斜线\n  x1 = 0;\n  y1 = 600;\n  x2 = 1200;\n  y2 = 0;\n  gdImageLine(img, x1, y1, x2, y2, red );\n\n\n  x1 = 1200;\n    y1 = 16.5;\n    x2 = 600;\n    y2 = 316.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n\n  x1 = 0;\n    y1 = 583.5;\n    x2 = 600;\n    y2 = 283.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n\n  }\n\n    // 绘制白色十字\n    int cross_width = width / 32;\n    int cross_arm_width = width / 32;\n    int center_x = width / 2;\n    int center_y = height / 2;\n\n    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);\n    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);\n\n    // 绘制红色十字\n    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);\n    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);\n} \n \n clear \n cd downloads \n cc gd_uk_flag.c \n ./a.out \n', 'tags': '', 'url': 'UK.html'}, {'title': 'Japan', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_japan_flag(gdImagePtr img);\n\nint main() {\n    // 設定圖片的寬度和高度\n    int width = 1200;\n    int height = (int)(width * 2.0 / 3.0);\n\n    // 建立真彩色圖片\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    // 繪製日本國旗\n    draw_japan_flag(img);\n\n    // 輸出圖片到一個 PNG 文件\n    FILE *outputFile = fopen("./../images/japan_flag_in_gd.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n\n    return 0;\n}\n\nvoid draw_japan_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int white, red;\n\n    // 定義顏色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    red = gdImageColorAllocate(img, 255, 0, 0);       // 紅色\n\n    // 用白色填充整個圖片\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n\n    // 在中心繪製一個紅色圓圈\n    int center_x = width / 2;\n    int center_y = height / 2;\n    int circle_radius = (int)(width / 5); // 根據需要調整半徑\n\n    gdImageFilledEllipse(img, center_x, center_y, circle_radius * 2, circle_radius * 2, red);\n} \n \n clear \n cd downloads \n cc gd_japan_flag.c \n ./a.out \n', 'tags': '', 'url': 'Japan.html'}, {'title': 'USA', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_usa_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nint main() {\n    int width = 800;\n    int height = (int)(width / 1.9);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_usa_flag(img);\n\n    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时出错。\\n");\n        return 1;\n    }\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n\n    return 0;\n}\n\nvoid draw_usa_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // 国旗颜色\n    red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹\n    blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形\n\n    int stripe_height = height / 13;\n    int stripe_width = width;\n    int star_size = (int)(0.0308 * height); // 星星大小\n\n    for (int y = 0; y < height; y += stripe_height) {\n        if (y / stripe_height % 2 == 0) {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);\n        } else {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);\n        }\n    }\n\n    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);\n\n    int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距\n    int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距\n    int star_start_x = (int)(0.125 * height); // 星星的起始X位置\n    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置\n\n    for (int row = 0; row < 9; row++) {\n        int starsPerRow = (row % 2 == 0) ? 6 : 5;\n\n        // 计算2、4、6和8排星星的偏移量\n        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;\n\n        for (int star = 0; star < starsPerRow; star++) {\n            int x = star_start_x + star * star_spacing_x + offset_x;\n\n            // 旋转角度（以弧度为单位）\n            double rotation_angle = M_PI / 5; // 忘記多少度的旋转\n\n            int y = star_start_y + row * star_spacing_y;\n            draw_star(img, x, y, star_size, white, rotation_angle);\n        }\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n\n    for (int i = 0; i < 10; i++) {\n        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;\n        int radius = (i % 2 == 0) ? size : size / 2;\n        points[i].x = x + radius * cos(angle);\n        points[i].y = y + radius * sin(angle);\n    }\n\n    // 用指定的颜色填充星星\n    gdImageFilledPolygon(img, points, 10, color);\n} \n \n clear \n cd downloads \n cc gd_usa_flag.c -lgd -lm \n ./a.out \n', 'tags': '', 'url': 'USA.html'}, {'title': 'ROC', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = (int)(width*2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_roc_flag(img);\n\n    FILE *outputFile = fopen("./roc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    int sun_radius = (int)(width/8);\n\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue\n\n    // 繪製紅色矩形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n\n    // 繪製藍色矩形區域\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n\n    // 繪製太陽\n    draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);\n}\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {\n    float angle = 0;\n    int numRays = 12; // 光芒的數量\n\n    gdPoint points[3]; // 三個頂點的陣列\n\n    for (int i = 0; i < numRays; i++) {\n        angle = i * (2 * M_PI / numRays);\n        float x1 = center_x + cos(angle) * sun_radius;\n        float y1 = center_y + sin(angle) * sun_radius;\n\n        // 調整兩個底邊頂點的位置\n      float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);\n      float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);\n      float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);\n      float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);\n\n        // 設定多邊形的三個頂點\n        points[0].x = (int)x1;\n        points[0].y = (int)y1;\n        points[1].x = (int)x2;\n        points[1].y = (int)y2;\n        points[2].x = (int)x3;\n        points[2].y = (int)y3;\n\n        gdImageFilledPolygon(img, points, 3, white);\n    }\n  //外圈\n  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);\n\n    // 繪製太陽內部\n    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);\n} \n \n clear\xa0 \n cd downloads \n cc gd_roc_flag.c -lgd -lm \n ./a.out \n', 'tags': '', 'url': 'ROC.html'}, {'title': 'W11', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nint main() {\n    int width = 800;\n    int height = 600;\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    FILE *outputFile = fopen("hellogd.png", "wb");\n    if (outputFile == NULL) {\n\nfprintf(stderr, "Error opening the output file.\\n");\n\nreturn 1;\n    }\n\n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int blue = gdImageColorAllocate(img, 0, 0, 255);\n    int black = gdImageColorAllocate(img, 0, 0, 0);\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n    // 長方形塗色\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);\n    // 橢圓形塗色\n    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);\n    // 橢圓形畫線\n    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);\n    // 畫直線\n    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);\n\n    // 多邊形畫線\n    gdPoint points[4];\n    points[0].x = (int)width/4;\n    points[0].y = (int)height*3/4;\n    points[1].x = points[0].x + 100;\n    points[1].y = points[0].y;\n    points[2].x = points[1].x;\n    points[2].y = points[1].y + 100;\n    points[3].x = points[2].x - 100;\n    points[3].y = points[2].y;\n    gdImagePolygon(img, points, 4, black);\n\n    // 多邊形塗色\n    gdPoint points2[4];\n    points2[0].x = (int)width/3;\n    points2[0].y = (int)height/2;\n    points2[1].x = points2[0].x + 100;\n    points2[1].y = points2[0].y;\n    points2[2].x = points2[1].x;\n    points2[2].y = points2[1].y + 100;\n    points2[3].x = points2[2].x - 150;\n    points2[3].y = points2[2].y;\n    gdImageFilledPolygon(img, points2, 4, red);\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n \n \n clear \n cd downloads \n cc hello.c -lgd -lm \n ./a.out \n', 'tags': '', 'url': 'W11.html'}, {'title': 'W13', 'text': '// 包含標準輸出入程式庫的標頭文件\n#include <stdio.h>\n \n// 主函式\nint main() {\n    // Open a file to write displacement and velocity data\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "Failed to create data file.\\n");\n        return 1;\n    }\n \n    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\n    double x = 0.2;  // Initial displacement\n    double v = 0.0;  // Initial velocity\n    double dt = 0.01; // Time step\n    double t = 0.0;  // Time\n \n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\n        v += acceleration * dt;\n        x += v * dt;\n \n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n \n        t += dt;\n    }\n \n    // Close the data file\n    fclose(outputFile);\n \n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n \n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n \n    // Close the Gnuplot process\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n \n    return 0;\n} \n \n clear \n cd downloads \n cc motion_data.c \n ./a.out \n', 'tags': '', 'url': 'W13.html'}, {'title': 'W15', 'text': '1. \n // https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China\n// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621\n// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library\n// https://www.rapidtables.com/web/color/RGB_Color.html\n// 幾何形狀著色與繪圖練習\n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    // 國旗長寬比為 3:2\n    int height = (int)(width*2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_roc_flag(img);\n\n    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n    // 由於中央白日圓形的半徑為青天寬度的 1/8\n    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\n    int sun_radius = (int)(width/8);\n    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\n    int white_circle_dia = sun_radius;\n    // 中央藍色圓形半徑為中央白日的 1又 2/15\n    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;\n    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n    // 根據畫布大小塗上紅色長方形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n    // 先設法以填色畫出六個白色堆疊菱形\n    draw_white_sun(img, center_x, center_y, sun_radius, white);\n    // 利用一個藍色大圓與白色小圓畫出藍色環狀\n    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n\n\n  // AB\n  gdImageLine(img, 429, 125, 279, 165, white);\n  // BE\n  gdImageLine(img, 279, 165, 170, 274, white);\n  // ED\n  gdImageLine(img, 170, 274, 170, 274, white);\n  // DA\n  gdImageLine(img, 170, 274, 429, 125, white);\n}\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color) {\n    // 實現 draw_white_sun 函數的內容\n    // 可以在此處繪製白日的內部圖案\n} \n \n 2. \n // https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China \n// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621 \n// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library \n// https://www.rapidtables.com/web/color/RGB_Color.html \n// 幾何形狀著色與繪圖練習 \n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖 \n#include <stdio.h> \n#include <gd.h> \n#include <math.h> \n\nvoid draw_roc_flag(gdImagePtr img); \nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color); \n\nint main() { \n    // width 3: height 2 \n    int width = 1200; \n    // 國旗長寬比為 3:2 \n    int height = (int)(width*2.0 / 3.0); \n\n    gdImagePtr img = gdImageCreateTrueColor(width, height); \n    gdImageAlphaBlending(img, 0); \n\n    draw_roc_flag(img); \n\n    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb"); \n    if (outputFile == NULL) { \n        fprintf(stderr, "Error opening the output file.\\n"); \n        return 1; \n    } \n    gdImagePngEx(img, outputFile, 9); \n    fclose(outputFile); \n    gdImageDestroy(img); \n    return 0; \n} \nvoid draw_roc_flag(gdImagePtr img) { \n    int width = gdImageSX(img); \n    int height = gdImageSY(img); \n    int red, white, blue; \n    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處 \n    int center_x = (int)(width/4); \n    int center_y = (int)(height/4); \n    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖 \n    // 由於中央白日圓形的半徑為青天寬度的 1/8 \n    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8 \n    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8 \n    int sun_radius = (int)(width/8); \n    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑 \n    int white_circle_dia = sun_radius; \n    // 中央藍色圓形半徑為中央白日的 1又 2/15 \n    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15; \n    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值 \n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色 \n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色 \n    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色 \n    // 根據畫布大小塗上紅色長方形區域 \n    gdImageFilledRectangle(img, 0, 0, width, height, red); \n    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色 \n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue); \n  {int x1 = 429; \n   int y1 = 125; \n   int x2 = 279; \n   int y2 = 165; \n   gdImageSetThickness(img, 10); // 設置線條寬度為10\n   gdImageLine(img, x1, y1, x2, y2, white); // 畫線\n   // 畫一條線連接兩個點 \n   gdImageLine(img, x1, y1, x2, y2, white); \n  } \n  {int x1 = 170; \n     int y1 = 274; \n     int x2 = 279; \n     int y2 = 165; \n\n     // 畫一條線連接兩個點 \n     gdImageLine(img, x1, y1, x2, y2, white); \n  } \n  { \n    int x1 = 170; \n     int y1 = 274; \n     int x2 = 429; \n     int y2 = 125; \n\n     // 畫一條線連接兩個點 \n     gdImageLine(img, x1, y1, x2, y2, white); \n  } \n  // 利用一個藍色大圓與白色小圓畫出藍色環狀 \n  gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue); \n  gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white); \n\n\n  // 定義座標結構 \n  typedef struct { \n      double x; \n      double y; \n  } Point; \n\n  // 計算圓與線的交點 \n  void circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) { \n      // 直線斜率 \n      double m = (y2 - y1) / (x2 - x1); \n\n      // 直線方程式中的常數項 \n      double b = y1 - m * x1; \n\n      // 圓與直線交點的計算 \n      double A = 1 + pow(m, 2); \n      double B = 2 * (m * b - m * k - h); \n      double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2); \n\n      // 判斷交點個數 \n    double discriminant = pow(B, 2) - 4 * A * C; \n    if (discriminant > 0) { \n        double x_intersect1 = (-B + sqrt(discriminant)) / (2 * A); \n        double y_intersect1 = m * x_intersect1 + b; \n        printf("交點: (%.2f, %.2f)\\n", x_intersect1, y_intersect1); \n\n        double x_intersect2 = (-B - sqrt(discriminant)) / (2 * A); \n        double y_intersect2 = m * x_intersect2 + b; \n        printf("交點: (%.2f, %.2f)\\n", x_intersect2, y_intersect2); \n    } else if (discriminant == 0) { \n        double x_intersect = -B / (2 * A); \n        double y_intersect = m * x_intersect + b; \n        printf("交點: (%.2f, %.2f)\\n", x_intersect, y_intersect); \n    } else { \n        printf("No points.\\n"); \n    } \n\n  } \n      // 圓的參數 \n      double circle_x = (int)(width/4); // 圓心 x 座標 \n      double circle_y = (int)(height/4); // 圓心 y 座標 \n      double radius = white_circle_dia +  white_circle_dia*2/15; // 圓半徑 \n      // 兩點座標 \n  double x3 = 170; \n  double y3 = 274; \n  double x4 = 279; \n  double y4 = 165; \n\n  circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3); \n\n  double x5 = 279; \n  double y5 = 165; \n  double x6 = 429; \n  double y6 = 125; \n\n  circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5); \n  } \n \n \n \n', 'tags': '', 'url': 'W15.html'}, {'title': 'W16', 'text': '1. \n #include <gd.h>\n#include <stdio.h>\n#include <math.h>\n\n#define WIDTH 800\n#define HEIGHT 600\n#define SCALE 100\n\n//繪製電阻形狀\nvoid drawResistor(gdImagePtr im, int x1, int y, int width, int height) {\n    int startX = x1 ;\n    int endX = x1 + width ;\n\n    // 第一段直線向前走一段\n    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上45度\n    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上90度\n    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上90度\n    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2 , startX + width / 4 + height / 2 + 4 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2 + 4 * height, y - height / 2, startX + width / 4 + height / 2 + 5 * height, y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n  // 向上45度\n    gdImageLine(im, startX + width / 4 + height / 2 + 5 * height, y + height / 2, startX + width / 4 + height / 2 + 5 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));\n\n  gdImageLine(im, startX + width / 4 + height / 2 + 5 * height + height / 2, y, startX + width / 4 + height / 2 + 5 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));\n\n\n  {\n    int startX = 100;\n  gdImageColorAllocate(im, 0, 0, 255);\n\n\n    // 第一段直線向前走一段\n    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上45度\n    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上90度\n    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上45度\n      gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));\n\n    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));\n }\n\n  {\n    int startX = 585;\n  gdImageColorAllocate(im, 0, 0, 255);\n\n\n    // 第一段直線向前走一段\n    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上45度\n    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上90度\n    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上45度\n      gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));\n\n    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));\n\n    gdImageLine(im, 100, y +20, 700, y +20, gdImageColorAllocate(im, 0, 255, 0));\n\n}\n}\n\nint main() {\n    gdImagePtr im;\n    FILE *outputFile;\n\n    // 創建圖像物件\n    im = gdImageCreateTrueColor(WIDTH, HEIGHT);\n    if (im == NULL) {\n        fprintf(stderr, "Error creating GD image.\\n");\n        return 1;\n    }\n\n    outputFile = fopen("./../images/161.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n\n    //配置顏色\n    int black, white, red, blue, green;\n\n    black = gdImageColorAllocate(im, 0, 0, 0);\n    white = gdImageColorAllocate(im, 255, 255, 255);\n    red = gdImageColorAllocate(im, 255, 0, 0);\n    blue = gdImageColorAllocate(im, 0, 0, 255);\ngreen = gdImageColorAllocate(im, 0, 255, 0);\n    gdImageFilledRectangle(im, 0, 0, WIDTH - 1, HEIGHT - 1, white);\n\n    // 繪製牆面\n    gdImageLine(im, SCALE, SCALE, SCALE, HEIGHT - SCALE, black);\n    gdImageLine(im, WIDTH - SCALE, SCALE, WIDTH - SCALE, HEIGHT - SCALE, black);\n\n   // 繪製彈簧(電阻)\n    drawResistor(im, WIDTH / 3 + SCALE / 2, HEIGHT / 2, SCALE / 2, SCALE / 4);\n\n    // 繪製質量（方形）\n    gdImageFilledRectangle(im, WIDTH / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);\n    gdImageFilledRectangle(im, WIDTH * 2 / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH * 2 / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);\n\n  gdImageFilledRectangle(im, 100, HEIGHT +300, 700, HEIGHT /2 +49 , black);\n\n\n    //生成圖片\n    gdImagePng(im, outputFile);\n    fclose(outputFile);\n    gdImageDestroy(im);\n\n    return 0;\n} \n \n 2. \n #include <stdio.h>\n#include <math.h>\n\n#define TIME_STEP 0.01 // 時間步長\n#define SIMULATION_TIME 10.0 // 模擬時間\n\n// 物體參數\n#define m1 2.0\n#define m2 3.0\n#define k1 0.5\n#define k2 1.0\n#define k3 1.5\n#define c1 0.25\n#define c2 0.33\n#define c3 0.5\n#define X1_initial 1.0\n#define X2_initial -0.5\n#define V0 0.0\n\n// 計算阻尼力\ndouble dampingForce(double c, double v) {\n    return -c * v;\n}\n\n// 模擬物體運動\nvoid simulateMotion() {\n  double X1 = X1_initial;\n  double X2 = X2_initial;\n  double V1 = V0;\n  double V2 = V0;\n\n  FILE *fp;\n  fp = fopen("motion_data.txt", "w");\n\n  for (double t = 0; t <= SIMULATION_TIME; t += TIME_STEP) {\n  double F1 = -k1 * (X1 - 0) - c1 * (V1 - 0); // 第一個物體受到的合力\n  double F2 = -k2 * (X2 - X1) - c2 * (V2 - V1); // 第二個物體受到的合力\n  double F3 = -k3 * (X2 - 0) - c3 * (V2 - 0); // 第二個物體受到的合力\n\n  double a1 = F1 / m1; // 第一個物體的加速度\n  double a2 = F2 / m2; // 第二個物體的加速度\n\n// 更新速度和位置\n   V1 += a1 * TIME_STEP;\n   V2 += a2 * TIME_STEP;\n\n  X1 += V1 * TIME_STEP;\n  X2 += V2 * TIME_STEP;\n\n// 在文件寫入時紀錄 m1 和 m2 的位置和速度數據\n  fprintf(fp, "%lf %lf %lf %lf %lf\\n", t, X1, X2, V1, V2);\n    }\n\n\n  fclose(fp);\n}\n\n\n\nint main() {\n    FILE *gnuplotPipe = popen("gnuplot", "w");\n    if (gnuplotPipe) {\n        fprintf(gnuplotPipe, "set terminal png\\n");\n        fprintf(gnuplotPipe, "set output \'motion_plot.png\'\\n");\n        fprintf(gnuplotPipe, "set xlabel \'Time\'\\n");\n        fprintf(gnuplotPipe, "set ylabel \'Position / Velocity\'\\n");\n        fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines title \'m1 position\', \'motion_data.txt\' using 1:3 with lines title \'m2 position\', \'motion_data.txt\' using 1:4 with lines title \'m1 velocity\', \'motion_data.txt\' using 1:5 with lines title \'m2 velocity\'\\n");\n        fprintf(gnuplotPipe, "exit\\n");\n        fflush(gnuplotPipe);\n        pclose(gnuplotPipe);\n    } else {\n        printf("Error opening pipe to Gnuplot.\\n");\n    }\n    return 0;\n} \n', 'tags': '', 'url': 'W16.html'}, {'title': 'c_EX', 'text': '', 'tags': '', 'url': 'c_EX.html'}, {'title': 'ex', 'text': '1. \n /* ====================\n Say Hello World!.\n==================== */\n#include <stdio.h>\nvoid main()\n{\n /* 印出 Hello */\nprintf("Hello World!");\n}\n \n \n 2. \n /* ====================\n Say Hello World! Bye Bye.\n==================== */\n#include <stdio.h>\nint main()\n{\n/* 印出 Hello World! Bye Bye */\nprintf("Hello World! ");\nprintf("Bye ");\nprintf("Bye");\nreturn 0;\n} \n \n 3. \n /* ====================\n變數宣告的例子 3.\n==================== */\n#include <stdio.h>\nint main()\n{\nint a = 1;\nint A = 8;\nint b = 2, c;\nc = A - a + b;\n/* 輸出 a, A, b, c 到螢幕 */\nprintf( "a = %d, A = %d, b = %d, c = %d ", a, A, b, c );\nreturn 0;\n} \n \n 4. \n #include <stdio.h>\nvoid main()\n{\nfloat a = 0.5;\ndouble b = 1.2;\nint c = 3;\nb = b + a + c;\n/* 輸出 a, b, c 到螢幕 */\nprintf( " a = %3.1f, b = %3.1f, c = %d ", a ,b, c );\n} \n \n 5. \n /* ====================\n字元範例 1\n==================== */\n#include <stdio.h>\nint main()\n{\nchar x, y;\nx = \'a\';\ny = (char)97;\n/* 輸出 x, y, x, 最後一個是以 ASCII 值顯示 y */\nprintf( " x = %c, y = %c, ASCII of y = %d", x, y, y );\nreturn 0;\n} \n \n 6. \n /* ====================\n digital - 1\n==================== */\n#include <stdio.h>\nint main()\n{\nint a = 64;\nint b = 0x40;\nlong c = 64L;\nprintf(“%d,%d,%d”, a, b, c );\nreturn 0;\n} \n \n 7. \n /* =========================\n輸入一個整數\n========================= */\n#include <stdio.h>\nint main()\n{\nint i;\nprintf("Input an integer:");\nscanf( "%d", &i ); /* ch 前面加個 &(位址運算元) */\nprintf( "the number is %d", i );\nreturn 0;\n} \n \n 8. \n /* ====================\n基本運算範例.\n==================== */\n#include<stdio.h>\nint main()\n{\nint a,b;\na = 10; b = 3;\nprintf( "%d \\n", a * b );\nprintf( "%d \\n", a / b );\nprintf( "%d \\n", a + b );\nprintf( "%d \\n", a - b );\nprintf( "%d \\n", a % b );\nreturn 0;\n} \n \n 9. \n /* ====================\n關係運算元的範例.\n==================== */\n#include <stdio.h>\nint main()\n{\nint a = 10, b = 5;\nprintf( " a == b is %d \\n", a == b );\nprintf( " a > b is %d \\n", a > b );\nprintf( " a < b is %d \\n", a < b );\nprintf( " a >= b is %d \\n", a >= b );\nprintf( " a <= b is %d \\n", a <= b );\nprintf( " a != b is %d \\n", a != b );\nprintf( "\\n" );\nb = 10;\nprintf( " a == b is %d \\n", a == b );\nprintf( " a > b is %d \\n", a > b );\nprintf( " a < b is %d \\n", a < b );\nprintf( " a >= b is %d \\n", a >= b );\nprintf( " a <= b is %d \\n", a <= b );\nprintf( " a != b is %d \\n", a != b );\nreturn 0;\n} \n \n 10. \n /* ====================\n位元運算元的範例.\n==================== */\n#include<stdio.h>\nvoid main()\n{\nint a,b;\na = 15;\nb = 1;\nprintf("%d \\n", a | b ); /* a OR b */\nprintf("%d \\n", a & b ); /* a AND b */\nprintf("%d \\n", a ^ b ); /* a XOR b */\nprintf("%d \\n", a << 1 ); /* a 位元左移 1 位 */\nprintf("%d \\n", a >> 1 ); /* a 位元右移一位 */\nprintf("%d \\n", ~a ); /* A 的補數運算 */\n} \n \n', 'tags': '', 'url': 'ex.html'}, {'title': '練習二', 'text': '1. \n /* ====================\n Logical NOT.\n==================== */\n#include <stdio.h>\nvoid main()\n{\nint a;\na = 3;\nprintf("%d\\n", !a );\na = 0;\nprintf("%d\\n", !a );\n} \n \n 2. \n /* ====================\n Logical AND.\n==================== */\n#include <stdio.h>\nvoid main()\n{\nprintf("%d\\n", 1 && 3 );\nprintf("%d\\n", 0 && 0 );\nprintf("%d\\n", 2 && 2 );\n} \n \n 3. \n /* ====================\n sizeof 的範例.\n==================== */\n #include <stdio.h>\nvoid main()\n{\nchar a;\nprintf( " The size of int is %d \\n", sizeof(int) );\nprintf( " The size of char a is %d \\n", sizeof(a) );\n} \n \n 4. \n /* ====================\n if 與 else 的範例 2.\n==================== */\n#include <stdio.h>\nvoid main()\n{\nint i; \nprintf( "input an integer:" );\n scanf( "%d", &i );\nif( i < 100 )\n{\nprintf( "i < 100" );\n}\nelse\n{\nif( (i >= 100) && (i < 200) )\n{\nprintf( "i >= 100 and i < 200\'" );\n}\nelse\n{\nprintf("i >= 200");\n}\n}\n} \n \n 5. \n /* ====================\nswitch - case 的範例 1.\n==================== */\n#include <stdio.h>\nvoid main()\n{\nchar c;\nprintf( "Input a char:" );\nscanf( "%c", &c );\nswitch( c )\n{\ncase \'a\':\nprintf(" you pressed a ");\nbreak;\ncase \'b\':\nprintf(" you pressed b ");\nbreak;\ncase \'c\':\nprintf(" you pressed c ");\nbreak;\ndefault:\nprintf(" not a, b, c ");\nbreak;\n}\n} \n \n 6. \n /* ====================\nswitch - case 的範例 4.\n印出 odd, 或 even.\n==================== */\n#include <stdio.h>\nvoid main()\n{\nint i;\nprintf( "Input a number:" );\nscanf( "%d", &i );\ni = i % 2;\nswitch( i )\n{\ncase 0:\nprintf("Even!");\nbreak;\ncase 1:\nprintf("Odd!");\nbreak;\n}\n} \n \n 7. \n /* ====================\n Program 2 - for\n ==================== */\n#include <stdio.h>\nvoid main()\n{\nint i, j;\nfor ( i = 0, j = 10; i < 6; i++, j++ )\n{\nprintf( "i = %d, ", i );\nprintf( "j = %d \\n", j );\n}\n} \n \n 8. \n /* ====================\n99 乘法.\n==================== */\n#include <stdio.h>\nint main()\n{\nint x, y;\nfor( x = 1; x <= 9; x++ )\n{\nfor( y = 1; y <= 9; y++ )\n{\nprintf("%d ", x*y );\n}\nprintf("\\n");\n}\nreturn 0;\n} \n \n 9. \n /* ====================\n while 的範例 1.\n==================== */\n#include <stdio.h>\nvoid main()\n{\nint i, j;\ni = 0; j = 10; /* 迴圈外先設定初值 */\nwhile( i < 6 )\n{\nprintf( "i = %d, ", i );\nprintf( "j = %d \\n", j );\ni++;\nj++; \n}\n} \n \n 10. \n /* ====================\n do - while.\n==================== */\n#include <stdio.h>\nvoid main()\n{\nint i, j;\ni = 0; j = 10; /* 迴圈外先設定初值 */\ndo\n{\nprintf( "i = %d, ", i );\nprintf( "j = %d \\n", j );\ni++;\nj++; \n}\nwhile( i < 6 ); /* 檢查條件的地方 */\n} \n \n', 'tags': '', 'url': '練習二.html'}, {'title': 'ANSIC', 'text': '', 'tags': '', 'url': 'ANSIC.html'}, {'title': 'ex1', 'text': '計算球體的體積 \n #include <stdio.h>     // Include the standard input/output header file.\n\nfloat myradius;          /* radius of the sphere */\nfloat myvolume;          /* volume of the sphere (to be computed) */\nchar line_text[50];      /* a line from the keyboard */\n\n/* 圓周率pi的值，保留50位小數，來自維基百科 */\nconst float PI = 3.14159265358979323846264338327950288419716939937510;\n\nint main() {\nprintf("Input the radius of the sphere : ");  // Prompt the user to input the radius of the sphere.\nfgets(line_text, sizeof(line_text), stdin);  // Read a line of input from the user and store it in \'line_text\'.\nsscanf(line_text, "%f", &myradius);         // Convert the input from \'line_text\' to a float and store it in \'myradius\'.\n\nmyvolume = (4.0 / 3.0) * PI * (myradius * myradius * myradius);  /* Calculate the volume of the sphere using the formula. */\nprintf("The volume of sphere is %f.\\n", myvolume);  // Print the calculated volume of the sphere.\n\nreturn(0);   // Return 0 to indicate successful execution of the program.\n} \n \n \n \n 求任意數的平方 \n #include <stdio.h>\n\ndouble square(double num)\n{\n    return (num * num);\n}\nint main()\n{\n    int num;\n    double n;\n  printf("\\n\\n Function : find square of any number :\\n");\n  printf("------------------------------------------------\\n");\t\n\n    printf("Input any number for square : ");\n    scanf("%d", &num);\n    n = square(num);\n    printf("The square of %d is : %.2f\\n", num, n); \n    return 0;\n} \n \n \n \n 計算從 1 到 n 的數位之和 \n #include<stdio.h>\n\nint sumOfRange(int);\n\nint main() \n{\n   int n1;\n   int sum;\n  printf("\\n\\n Recursion : calculate the sum of numbers from 1 to n :\\n");\n  printf("-----------------------------------------------------------\\n");    \n\n   printf(" Input the last number of the range starting from 1 : ");\n   scanf("%d", &n1);\n\n   sum = sumOfRange(n1); \n   printf("\\n The sum of numbers from 1 to %d : %d\\n\\n", n1, sum);\n\n   return (0);\n}\n\nint sumOfRange(int n1) \n{\n   int res;\n   if (n1 == 1) \n   {\n      return (1);\n   } else \n   {\n      res = n1 + sumOfRange(n1 - 1); //calling the function sumOfRange itself\n   }\n   return (res);\n} \n \n \n \n 簡單計算 \n #include <stdio.h>  // Include the standard input/output header file.\n\nvoid main() {\n  int num1,num2,opt;  // Declare variables to store user input and operation choice.\n\n  // Prompt user for two integers and store them.\n  printf("Enter the first Integer :");\n  scanf("%d",&num1);\n  printf("Enter the second Integer :");\n  scanf("%d",&num2);\n\n  // Display the menu for operation choice.\n  printf("\\nInput your option :\\n");\n  printf("1-Addition.\\n2-Substraction.\\n3-Multiplication.\\n4-Division.\\n5-Exit.\\n");\n  scanf("%d",&opt);  // Read and store the user\'s choice.\n\n  switch(opt) {  // Start a switch statement based on the user\'s choice.\n    case 1:\n      printf("The Addition of  %d and %d is: %d\\n",num1,num2,num1+num2);  // Perform addition and print result.\n      break;\n\n    case 2:\n      printf("The Substraction of %d  and %d is: %d\\n",num1,num2,num1-num2);  // Perform subtraction and print result.\n      break;\n\n    case 3:\n      printf("The Multiplication of %d  and %d is: %d\\n",num1,num2,num1*num2);  // Perform multiplication and print result.\n      break;  \n\n    case 4:\n      if(num2==0) {\n        printf("The second integer is zero. Divide by zero.\\n");  // Handle division by zero.\n      } else {\n        printf("The Division of %d  and %d is : %d\\n",num1,num2,num1/num2);  // Perform division and print result.\n      }  \n      break;\n\n    case 5: \n      break;  // Exit the program.\n\n    default:\n      printf("Input correct option\\n");  // Display error message for invalid input.\n      break; \n  }\n} \n \n \n \n \n \n \n 檢查三角形 \n #include <stdio.h>  // Include the standard input/output header file.\n\nint main()  \n{  \n    int sidea, sideb, sidec; // Declare variables for the sides of the triangle.\n\n    /* \n     * Reads all sides of a triangle \n     */  \n    printf("Input three sides of triangle: ");  // Prompt user for input.\n    scanf("%d %d %d", &sidea, &sideb, &sidec);  // Read and store the sides of the triangle.\n\n    if(sidea==sideb && sideb==sidec) // Check if all sides are equal.  \n    {  \n        printf("This is an equilateral triangle.\\n");  // Print message for equilateral triangle.\n    }  \n    else if(sidea==sideb || sidea==sidec || sideb==sidec) // Check if two sides are equal.  \n    {  \n        printf("This is an isosceles triangle.\\n");  // Print message for isosceles triangle.\n    }  \n    else // If no sides are equal.  \n    {  \n        printf("This is a scalene triangle.\\n");  // Print message for scalene triangle.\n    }  \n\n    return 0;  \n} \n \n \n \n \n 檢查給定年份是否為閏年 \n #include <stdio.h>   // Include the standard input/output header file.\n\nvoid main()\n{\n    int chk_year;   // Declare an integer variable \'chk_year\'.\n\n    printf("Input a year :");   // Prompt the user to input a year.\n    scanf("%d", &chk_year);   // Read and store the user\'s input in \'chk_year\'.\n    if ((chk_year % 400) == 0)   // Check if \'chk_year\' is divisible by 400 with no remainder.\n        printf("%d is a leap year.\\n", chk_year);   // Print a message indicating that \'chk_year\' is a leap year.\n    else if ((chk_year % 100) == 0)   // Check if \'chk_year\' is divisible by 100 with no remainder.\n        printf("%d is not a leap year.\\n", chk_year);   // Print a message indicating that \'chk_year\' is not a leap year.\n    else if ((chk_year % 4) == 0)   // Check if \'chk_year\' is divisible by 4 with no remainder.\n        printf("%d is a leap year.\\n", chk_year);   // Print a message indicating that \'chk_year\' is a leap year.\n    else\n        printf("%d is not a leap year \\n", chk_year);   // Print a message indicating that \'chk_year\' is not a leap year.\n} \n \n \n \n 現在時間 \n #include <time.h>\n#include <stdio.h>  \n#include <stdlib.h>\n\nint main(void)\n{\n    time_t cur_time;\n    char* cur_t_string;\n    cur_time = time(NULL);\n    if (cur_time == ((time_t)-1))\n    {\n        (void) fprintf(stderr, "Failure to get the current date and time.\\n");\n        exit(EXIT_FAILURE);\n    }\n    cur_t_string = ctime(&cur_time); //convert to local time format\n    if (cur_t_string == NULL)\n    {\n        (void) fprintf(stderr, "Failure to convert the current date and time.\\n");\n        exit(EXIT_FAILURE);\n    }\n    (void) printf("\\n The Current time is : %s \\n", cur_t_string);\n    exit(EXIT_SUCCESS);\n} \n \n \n \n 這個月過了幾秒 \n #include <stdio.h>\n#include <time.h>\n\nint main(void)\n{\n    time_t now;\n    time(&now);\n\n    struct tm beg_month;\n    beg_month = *localtime(&now);\n    beg_month.tm_hour = 0;\n    beg_month.tm_min = 0;\n    beg_month.tm_sec = 0;\n    beg_month.tm_mday = 1;\n\n    double seconds = difftime(now, mktime(&beg_month));\n    printf("\\n %.f seconds passed since the beginning of the month.\\n\\n", seconds);\n    return 0;\n}\n \n \n \n 反向整數 \n #include <stdio.h>\nint reverse(int n) {\n    int d, y = 0;\n    while (n) {\n        d = n % 10;\n        if ((n > 0 && y > (0x7fffffff - d) / 10) ||\n            (n < 0 && y < ((signed)0x80000000 - d) / 10)) {\n            return 0;  \n        }\n        y = y * 10 + d;\n        n = n / 10;\n    }\n    return y;  \n}\n\nint main(void)\n{\n    int i = 123;\n    printf("Original integer: %d  ",i);\n    printf("\\nReverse integer: %d  ",reverse(i));\n    i = 208478933;\n    printf("\\nOriginal integer: %d  ",i);\n    printf("\\nReverse integer: %d  ",reverse(i));\n    i = -73634;\n    printf("\\nOriginal integer: %d  ",i);\n    printf("\\nReverse integer: %d  ",reverse(i));\n    return 0;\n}\n \n \n \n \n 列出所有質因數 \n #include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n  int main(void)\n    {   \n     //int n = 8; \n     int n = 84651; \n    // int n = 18; \n     printf("All prime factors of %d are: ",n);\n     if (n>0)\n    {\t\n       while (n%2==0) \n        { \n            printf("2 "); \n            n /= 2; \n        } \n\n        for (int i = 3; i <= sqrt(n); i+= 2) \n        { \n            while (n%i == 0) \n            { \n                printf("%d ",i); \n                n /= i; \n            } \n        } \n        if (n > 2) \n            printf("%d ",n); \n       }\n       return 0;\n  }\n \n \n \n \n', 'tags': '', 'url': 'ex1.html'}, {'title': '練習一', 'text': '1. 將攝氏度轉換為華氏度 \n #include <stdio.h>     // Include the standard input/output header file.\n\nfloat temp_f;     /* degrees fahrenheit */\nfloat temp_c;     /* degrees centigrade */\nchar line_text[50];        /* a line of input */\n\nint main() {\nprintf("Input a temperature (in Centigrade): ");  // Prompt the user to input a temperature in centigrade.\nfgets(line_text, sizeof(line_text), stdin);      // Read a line of input from the user and store it in \'line_text\'.\nsscanf(line_text, "%f", &temp_c);               // Convert the input from \'line_text\' to a float and store it in \'temp_c\'.\n\ntemp_f = ((9.0 / 5.0) * temp_c) + 32.0;         // Convert temperature from centigrade to fahrenheit and store it in \'temp_f\'.\nprintf("%f degrees Fahrenheit.\\n", temp_f);    // Print the temperature in fahrenheit.\n\nreturn(0);   // Return 0 to indicate successful execution of the program.\n} \n \n \n 2.計算矩形的周長 \n #include <stdio.h>     // Include the standard input/output header file.\nint main() {\n    float rec_width;         /* Declare variable \'rec_width\' to store the width of the rectangle */\n    float rec_height;        /* Declare variable \'rec_height\' to store the height of the rectangle */\n    float rec_perimeter;     /* Declare variable \'rec_perimeter\' to store the perimeter (to be computed) */\n\n    // Prompt the user to input the height of the rectangle.\n    printf("Input the height of the Rectangle : ");\n    scanf("%f", &rec_height);  // Read the value of \'rec_height\' from the user.\n\n    // Prompt the user to input the width of the rectangle.\n    printf("Input the width of the Rectangle : ");\n    scanf("%f", &rec_width);  // Read the value of \'rec_width\' from the user.\n\n    // Calculate the perimeter of the rectangle using the formula: perimeter = 2 * ( width + height )\n    rec_perimeter = 2.0 * (rec_height + rec_width);\n\n    // Print the calculated perimeter of the rectangle.\n    printf("Perimeter of the Rectangle is : %f\\n", rec_perimeter);\n\n    return 0;  // Indicate successful program execution.\n} \n \n \n 3. 將公里/小時轉換為英里/小時 \n #include <stdio.h>     // Include the standard input/output header file.\n\nfloat kmph;              /* kilometers per hour */\nfloat miph;              /* miles per hour (to be computed) */\nchar  line_text[50];      /* a line from the keyboard */\n\nint main()\n{\nprintf("Input kilometers per hour: ");   // Prompt the user to input kilometers per hour.\nfgets(line_text, sizeof(line_text), stdin);   // Read a line of input from the user and store it in \'line_text\'.\nsscanf(line_text, "%f", &kmph);   // Convert the input to a float and store it in \'kmph\'.\n\nmiph = (kmph * 0.6213712);   // Convert kilometers per hour to miles per hour.\nprintf("%f miles per hour\\n", miph);   // Print the result in miles per hour.\n\nreturn(0);   // Return 0 to indicate successful execution of the program.\n} \n \n \n 4. 計算總分鐘數 \n #include <stdio.h>     // Include the standard input/output header file.\n\nint hrs;          /* given number of hours */\nint mins;         /* given number of minutes */\nint tot_mins;     /* total number of minutes (to be computed) */\n\nconst int MINaHOUR = 60;      /* number of minutes in an hour */\n\nchar line_text[50];      /* line of input from keyboard */\n\nint main() {\nprintf("Input hours: ");   // Prompt the user to input hours.\nfgets(line_text, sizeof(line_text), stdin);   // Read a line of input from the user and store it in \'line_text\'.\nsscanf(line_text, "%d", &hrs);   // Convert the input to an integer and store it in \'hrs\'.\n\nprintf("Input minutes: ");   // Prompt the user to input minutes.\nfgets(line_text, sizeof(line_text), stdin);   // Read a line of input from the user and store it in \'line_text\'.\nsscanf(line_text, "%d", &mins);   // Convert the input to an integer and store it in \'mins\'.\n\ntot_mins = mins + (hrs * MINaHOUR);   // Calculate the total number of minutes.\n\nprintf("Total: %d minutes.\\n", tot_mins);   // Print the total number of minutes.\n\nreturn(0);   // Return 0 to indicate successful execution of the program.\n}\n \n \n \n 5. 顯示總小時數和分鐘數 \n #include <stdio.h>     // Include the standard input/output header file.\n\nint tot_mins;  /* given number of minutes */\nint hrs;          /* number of hours (to be computed) */\nint mins;        /* number of minutes (to be computed) */\n\nconst int MINaHOUR = 60;      /* number of minutes in an hour */\n\nchar line_text[50];      /* line of input from keyboard */\n\nint main() {\nprintf("Input minutes: ");   // Prompt the user to input minutes.\nfgets(line_text, sizeof(line_text), stdin);   // Read a line of input from the user and store it in \'line_text\'.\nsscanf(line_text, "%d", &tot_mins);   // Convert the input to an integer and store it in \'tot_mins\'.\n\nhrs = (tot_mins / MINaHOUR);   // Calculate the number of hours.\nmins = (tot_mins % MINaHOUR);   // Calculate the remaining minutes.\n\nprintf("%d Hours, %d Minutes.\\n", hrs, mins);   // Print the calculated hours and minutes.\n\nreturn(0);   // Return 0 to indicate successful execution of the program.\n}\n \n \n \n 6. 計算三個數位的總和 \n #include <stdio.h>     // Include the standard input/output header file.\n\nint num1, num2, num3;   /* declaration of three variables */  \nint sum;                /* variable to store the sum of numbers */\nchar line_text[50];     /* line of input from keyboard */ \n\nint main() \n{  \nprintf("Input three numbers separated by comma : ");   // Prompt the user to input three numbers separated by comma.\nfgets(line_text, sizeof(line_text), stdin);   // Read a line of input from the user and store it in \'line_text\'.\nsscanf(line_text, "%d, %d, %d", &num1, &num2, &num3);   // Convert the input to integers and store them in \'num1\', \'num2\', \'num3\'.\nsum = num1 + num2 + num3;   // Calculate the sum of the three numbers.\nprintf("The sum of three numbers : %d\\n", sum);   // Print the sum of the three numbers.  \nreturn(0);   // Return 0 to indicate successful execution of the program.  \n}  \n \n \n \n 7. 以攝氏度為單位讀取溫度 \n #include <stdio.h>   // Include the standard input/output header file.\n\nvoid main()\n{\n    int tmp;   // Declare a variable to store temperature.\n\n    printf("Input days temperature : ");   // Prompt user for input.\n    scanf("%d", &tmp);   // Read and store temperature.\n\n    if (tmp < 0)   // Check if temperature is less than 0.\n        printf("Freezing weather.\\n");   // Print message for freezing weather.\n    else if (tmp < 10)   // Check if temperature is between 0 and 10.\n        printf("Very cold weather.\\n");   // Print message for very cold weather.\n    else if (tmp < 20)   // Check if temperature is between 10 and 20.\n        printf("Cold weather.\\n");   // Print message for cold weather.\n    else if (tmp < 30)   // Check if temperature is between 20 and 30.\n        printf("Normal in temp.\\n");   // Print message for normal temperature.\n    else if (tmp < 40)   // Check if temperature is between 30 and 40.\n        printf("Its Hot.\\n");   // Print message for hot weather.\n    else   // If none of the above conditions are met.\n        printf("Its very hot.\\n");   // Print message for very hot weather.\n} \n \n \n 8. 交換兩個數位 \n #include<stdio.h>\n\nvoid swap(int *,int *);\nint main()\n{\n\n    int n1,n2;\n\tprintf("\\n\\n Function : swap two numbers using function :\\n");\n\tprintf("------------------------------------------------\\n");\t   \n    printf("Input 1st number : ");\n    scanf("%d",&n1);\n    printf("Input 2nd number : ");\n    scanf("%d",&n2);\t\n\n    printf("Before swapping: n1 = %d, n2 = %d ",n1,n2);\n\t//pass the address of both variables to the function.\n    swap(&n1,&n2);\n\n    printf("\\nAfter swapping: n1 = %d, n2 = %d \\n\\n",n1,n2);\n    return 0;\n}\n\nvoid swap(int *p,int *q)\n{\n\t//p=&n1 so p store the address of n1, so *p store the value of n1\n\t//q=&n2 so q store the address of n2, so *q store the value of n2\n\n    int tmp;\n    tmp = *p; // tmp store the value of n1\n    *p=*q;    // *p store the value of *q that is value of n2\n    *q=tmp;   // *q store the value of tmp that is the value of n1\n}\n \n \n \n 9. 生成一個隨機數 \n #include<stdio.h>     // Include the standard input/output header file.\n#include<stdlib.h>    // Include the standard library header file.\n#include<time.h>      // Include the time header file for generating random numbers.\n\nint main ()           // Start of the main function.\n{\nint number, input;   // Declare two integer variables \'number\' and \'input\'.\n\nsrand ( time(NULL) );   // Initialize the random seed using the current time.\n\nnumber = rand() % 10 + 1;   // Generate a random number between 1 and 10 and store it in \'number\'.\n\ndo {   // Start of a do-while loop.\nprintf ("\\nGuess the number (1 to 10): ");   // Print a message prompting the user to guess the number.\nscanf ("%d",&input);    // Read the user\'s input and store it in \'input\'.\n\nif (number > input)   // If the random number is greater than the user\'s input.\nprintf ("The number is higher\\n");   // Print a message indicating that the number is higher.\n\n    } while (number!=input);   // Continue looping as long as the user\'s input is not equal to the random number.\n\nprintf ("That is correct!\\n\\n");   // Print a message indicating that the user guessed correctly.\n\nreturn 0;   // Return 0 to indicate successful execution of the program.\n}   // End of the main function. \n \n \n 10. 整數的絕對值 \n #include<stdio.h>      // Include the standard input/output header file.\n#include<stdlib.h>     // Include the standard library header file.\n\nint main ()          // Start of the main function.\n{\nint num;          // Declare an integer variable \'num\'.\n\nprintf("\\n Input a positive or negative number :");   // Prompt the user to input a number.\nscanf("%d",&num);   // Read the user\'s input and store it in \'num\'.\n\nprintf (" The absolute value of the given number is : %d\\n\\n",abs(num));   // Calculate and print the absolute value of \'num\'.\n\nreturn 0;   // Return 0 to indicate successful execution of the program.\n}   // End of the main function.\n \n \n \n', 'tags': '', 'url': '練習一.html'}, {'title': '期末總結', 'text': 'A. 是否 按照進度明確標示倉儲的改版歷程 \n \n \n B. 是否根據\xa0 IPv4 與 IPv6 \xa0 網路環境設定進行作法討論 \n \n \n C. 是否就 \xa0 Replit、s.cycu.org 與 localhost \xa0 情境下對個人與分組倉儲進行設定操作 \n D: 是否完成 上課內容 中的 Exercises \n \n \n E: 是否完成\xa0 w2-w5 \xa0 週任務中的 Exercises \n F: 是否完成\xa0 w6-w7 \xa0 週任務中的練習一與練習二 \n G: 是否完成 C 結合 gd 繪圖程式庫, 畫出\xa0 PROC ( 規格 ), \xa0 United Kingdom ( 規格 ), \xa0 Japan ( 規格 )與 \xa0 South Korea ( 規格 ) Flags \n H: 是否完成 w16 Final Project \n \n', 'tags': '', 'url': '期末總結.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};